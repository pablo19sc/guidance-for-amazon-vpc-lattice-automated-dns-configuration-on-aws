AWSTemplateFormatVersion: 2010-09-09
Description: Guidance for VPC Lattice automated DNS configuration on AWS (SO9532)

Parameters:
  ParameterName:
    Type: String
    Description: Systems Manager Parameter name
    Default: automation_resource

Resources:
  # ---------- IAM ROLE (EVENTBRIDGE RULES) ----------
  EventBridgeRulesRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EventRuleRole
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - !Ref EventBridgeRulesPolicy

  EventBridgeRulesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: EventTargetPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - events:PutEvents
            Resource:
              - !GetAtt GetParameter.Value

  # ---------- EVENTBRIDGE RULE: CATCHING VPC LATTICE SERVICE CREATION/DELETION VIA TAGS ----------
  EventRuleCrossAccount:
    Type: AWS::Events::Rule
    Properties:
      Name: vpclattice_newservice_rule
      EventPattern:
        source:
          - aws.tag
        detail-type:
          - "Tag Change on Resource"
        detail:
          changed-tag-keys: 
            - NewService
          service:
            - vpc-lattice
          resource-type:
            - service
      State: "ENABLED"
      Targets:
        - Id: SendToCrossAccountEventBus
          Arn: !GetAtt GetParameter.Value
          RoleArn: !GetAtt EventBridgeRulesRole.Arn
          DeadLetterConfig:
            Arn: !GetAtt DeadLetterQueue.Arn

  # ---------- SQS QUEUE (DEAD-LETTER) ----------
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: deadletter-queue
      SqsManagedSseEnabled: true
  
  # ----------- CUSTOM RESOURCE: OBTAINING SHARE PARAMETER (CROSS-ACCOUNT EVENT BUS ARN) ----------
  GetParameter:
    Type: Custom::GetParameter
    DependsOn:
      - GetParameterLogGroup
    Properties:
      ServiceToken: !GetAtt GetParameterFunction.Arn
      ParameterName: !Ref ParameterName

  # IAM Role (Describe Organization)
  GetParameterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowDescribeOrganization
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                Resource:
                  - "*"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetParameterLogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: Encryption not required for this log group
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/lambda/GetParameterFunction'
      RetentionInDays: 7
  
  GetParameterFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CWL permissions granted by use of AWSLambdaBasicExecutionRole
          - id: W89
            reason: No requirement for this function to be in a VPC
          - id: W92
            reason: No requirement to limit simultaneous executions
    Type: AWS::Lambda::Function
    Properties:
      Description: Get AWS Systems Manager Parameter (Shared)
      Runtime: python3.12
      Timeout: 10
      Role: !GetAtt GetParameterFunctionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |-
          import logging
          import boto3
          import json
          import cfnresponse
          from botocore.exceptions import ClientError

          log = logging.getLogger("handler")
          log.setLevel(logging.INFO)

          ssm = boto3.client('ssm')

          def lambda_handler(event, context):
              try:
                  log.info("Received event: %s", json.dumps(event))
                  request_type = event['RequestType']
                  response = {}

                  if request_type == 'Create':
                    parameter_name = event["ResourceProperties"]['ParameterName']

                    parameter_arn = ssm.describe_parameters(
                      Filters=[
                        {
                          'Key': 'Name',
                          'Values': [
                            parameter_name,
                          ]
                        },
                      ],
                      MaxResults=5,
                      Shared=True
                    )['Parameters'][0]['ARN']
                    
                    value = ssm.get_parameter(
                        Name=parameter_arn
                    )['Parameter']['Value']

                    response['Value'] = value
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
                  
              except:
                  log.exception("whoops")
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.FAILED,
                      {},
                      reason="Caught exception, check logs",
                  )
