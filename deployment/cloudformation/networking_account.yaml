AWSTemplateFormatVersion: 2010-09-09
Description: Guidance for VPC Lattice automated DNS configuration on AWS (SO9532)

Parameters:
  PrivateHostedZone:
    Type: String
    Description: Private Hosted Zone ID
  ParameterName:
    Type: String
    Description: Systems Manager Parameter name
    Default: automation_resource

Resources:
  # ---------- EVENTBRIDGE EVENT BUS (CROSS-ACCOUNT SHARING) ----------
  # Event bus
  EventBusCrossAccount:
    Type: AWS::Events::EventBus
    Properties:
      Name: cross_account_eventbus

  # Event bus policy
  EventBusCrossAccountPolicy:
    Type: "AWS::Events::EventBusPolicy"
    Properties:
      StatementId: "AllowOrgAccess"
      EventBusName: !Ref EventBusCrossAccount
      Action: events:PutEvents
      Principal: "*"
      Condition: 
        Key: aws:PrincipalOrgID
        Type: StringEquals
        Value: !GetAtt GetOrganization.Id
  
  # Event rule
  EventRuleCrossAccount:
    Type: AWS::Events::Rule
    Properties:
      Name: VpcLattice_Information
      EventBusName: !GetAtt EventBusCrossAccount.Arn
      EventPattern:
        source:
          - aws.tag
        detail-type:
          - "Tag Change on Resource"
        detail:
          changed-tag-keys: 
            - NewService
          service:
            - vpc-lattice
          resource-type:
            - service
      State: "ENABLED"
      Targets:
        - Id: SendToStepFunctions
          Arn: !Ref StepFunctionsDNSConfiguration
          RoleArn: !GetAtt EventBridgeTargetRole.Arn
          RetryPolicy:
            MaximumEventAgeInSeconds: 60
            MaximumRetryAttempts: 5
          DeadLetterConfig:
            Arn: !GetAtt DeadLetterQueue.Arn
  
  # IAM Role/Policy (EventBridge Target)
  EventBridgeTargetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EventTargetRole
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub events.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - !Ref EventBridgeTargetPolicy

  EventBridgeTargetPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: EventTargetPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Ref StepFunctionsDNSConfiguration

  # SQS queue
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: deadletter-queue
      SqsManagedSseEnabled: true

  # ---------- AWS SYSTEMS MANAGER PARAMETER: EVENTBRIDGE EVENT BUS (CROSS-ACCOUNT) ----------
  AutomationResourceParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Ref ParameterName
      Type: String
      Value: !GetAtt EventBusCrossAccount.Arn
      DataType: text
      Tier: Advanced

  # ---------- AWS RAM - SHARING PARAMETER WITH AWS ORGANIZATION ----------
  RAMResourceShare:
    Type: AWS::RAM::ResourceShare
    Properties:
      Name: automation_networking_resource
      AllowExternalPrincipals: false
      Principals: 
        - !GetAtt GetOrganization.Arn
      ResourceArns: 
        - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AutomationResourceParameter}

  # ---------- STEP FUNCTIONS (UPDATING PRIVATE HOSTED ZONE RECORD) ----------
  StepFunctionsDNSConfiguration:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: phz-configuration
      RoleArn: !GetAtt StepFunctionsRole.Arn
      StateMachineType: "STANDARD"
      LoggingConfiguration: 
        IncludeExecutionData: true
        Level: "ERROR"
        Destinations: 
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      DefinitionSubstitutions:
        phz: !Ref PrivateHostedZone
        dynamodbtable: !Ref DynamoDBTable
      DefinitionString: |
        {
          "Comment": "Guidance for VPC Lattice automated DNS configuration on AWS (SO9532)",
          "StartAt": "ActionType",
          "States": {
            "ActionType": {
              "Type": "Choice",
              "Default": "Pass",
              "Choices": [
                {
                  "Next": "GetService",
                  "Condition": "{% $exists($states.input.detail.tags.NewService) and ($states.input.detail.tags.NewService = \"true\") %}",
                  "Assign": {
                    "ServiceArn": "{% $states.input.resources[0] %}"
                  }
                },
                {
                  "Next": "GetDNSConfiguration",
                  "Condition": "{% 'NewService' in $states.input.detail.'changed-tag-keys' and $not($exists($states.input.detail.tags.NewService)) %}",
                  "Assign": {
                    "ServiceArn": "{% $states.input.resources[0] %}"
                  }
                }
              ],
              "QueryLanguage": "JSONata"
            },
            "GetDNSConfiguration": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "Next": "Choice",
              "QueryLanguage": "JSONata",
              "Arguments": {
                "TableName": "${dynamodbtable}",
                "Key": {
                  "ServiceArn": {
                    "S": "{% $ServiceArn %}"
                  }
                }
              }
            },
            "Choice": {
              "Type": "Choice",
              "Default": "Pass",
              "Choices": [
                {
                  "Next": "DeleteDNSConfiguration",
                  "Condition": "{% $exists($states.input.Item) %}",
                  "Output": {
                    "CustomDomainName": "{% $states.input.Item.CustomDomainName.S %}",
                    "VpcLatticeDomainName": "{% $states.input.Item.VpcLatticeDomainName.S %}",
                    "HostedZoneId": "{% $states.input.Item.HostedZoneId.S %}"
                  }
                }
              ],
              "QueryLanguage": "JSONata"
            },
            "DeleteDNSConfiguration": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "ListHostedZoneRecords",
                  "States": {
                    "ListHostedZoneRecords": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::aws-sdk:route53:listResourceRecordSets",
                      "QueryLanguage": "JSONata",
                      "Arguments": {
                        "HostedZoneId": "{% $states.input.HostedZoneId %}"
                      },
                      "Output": {
                        "Records": "{% $states.result.ResourceRecordSets %}"
                      },
                      "Next": "CheckHostedZoneRecords",
                      "Assign": {
                        "CustomDomainName": "{% $states.input.CustomDomainName %}"
                      }
                    },
                    "CheckHostedZoneRecords": {
                      "Type": "Map",
                      "ItemProcessor": {
                        "ProcessorConfig": {
                          "Mode": "INLINE"
                        },
                        "StartAt": "FoundRecord",
                        "States": {
                          "FoundRecord": {
                            "Type": "Choice",
                            "Default": "NoAction",
                            "Choices": [
                              {
                                "Next": "DeleteResourceRecordSet",
                                "Condition": "{% $states.input.Name = $join([$CustomDomainName,'.']) %}"
                              }
                            ],
                            "QueryLanguage": "JSONata"
                          },
                          "NoAction": {
                            "Type": "Pass",
                            "End": true
                          },
                          "DeleteResourceRecordSet": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::aws-sdk:route53:changeResourceRecordSets",
                            "End": true,
                            "QueryLanguage": "JSONata",
                            "Arguments": {
                              "ChangeBatch": {
                                "Changes": [
                                  {
                                    "Action": "DELETE",
                                    "ResourceRecordSet": "{% $states.input %}"
                                  }
                                ]
                              },
                              "HostedZoneId": "${phz}"
                            }
                          }
                        }
                      },
                      "End": true,
                      "QueryLanguage": "JSONata",
                      "Items": "{% $states.input.Records %}"
                    }
                  }
                },
                {
                  "StartAt": "DeleteItem",
                  "States": {
                    "DeleteItem": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::dynamodb:deleteItem",
                      "End": true,
                      "QueryLanguage": "JSONata",
                      "Arguments": {
                        "TableName": "${dynamodbtable}",
                        "Key": {
                          "ServiceArn": "{% $ServiceArn %}"
                        }
                      }
                    }
                  }
                }
              ],
              "QueryLanguage": "JSONata",
              "End": true
            },
            "GetService": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:vpclattice:getService",
              "Next": "CustomDNSConfigured",
              "QueryLanguage": "JSONata",
              "Output": {
                "ServiceInformation": "{% $states.result %}",
                "customDomainProvided": "{% $exists($states.result.CustomDomainName) %}"
              },
              "Arguments": {
                "ServiceIdentifier": "{% $ServiceArn %}"
              }
            },
            "CustomDNSConfigured": {
              "Type": "Choice",
              "Default": "Pass",
              "Choices": [
                {
                  "Next": "ServiceCreated",
                  "Condition": "{% $states.input.customDomainProvided %}",
                  "Output": {
                    "CustomDomainName": "{% $states.input.ServiceInformation.CustomDomainName %}",
                    "DnsEntry": "{% $states.input.ServiceInformation.DnsEntry %}"
                  }
                }
              ],
              "QueryLanguage": "JSONata"
            },
            "Pass": {
              "Type": "Pass",
              "End": true
            },
            "ServiceCreated": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "ChangeResourceRecordSetsAAAA",
                  "States": {
                    "ChangeResourceRecordSetsAAAA": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::aws-sdk:route53:changeResourceRecordSets",
                      "End": true,
                      "QueryLanguage": "JSONata",
                      "Arguments": {
                        "HostedZoneId": "${phz}",
                        "ChangeBatch": {
                          "Changes": [
                            {
                              "Action": "UPSERT",
                              "ResourceRecordSet": {
                                "Name": "{% $states.input.CustomDomainName %}",
                                "Type": "AAAA",
                                "AliasTarget": {
                                  "HostedZoneId": "{% $states.input.DnsEntry.HostedZoneId %}",
                                  "DnsName": "{% $states.input.DnsEntry.DomainName %}",
                                  "EvaluateTargetHealth": false
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                {
                  "StartAt": "CreateResourceRecordSet",
                  "States": {
                    "CreateResourceRecordSet": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::aws-sdk:route53:changeResourceRecordSets",
                      "End": true,
                      "QueryLanguage": "JSONata",
                      "Arguments": {
                        "HostedZoneId": "${phz}",
                        "ChangeBatch": {
                          "Changes": [
                            {
                              "Action": "UPSERT",
                              "ResourceRecordSet": {
                                "Name": "{% $states.input.CustomDomainName %}",
                                "Type": "A",
                                "AliasTarget": {
                                  "HostedZoneId": "{% $states.input.DnsEntry.HostedZoneId %}",
                                  "DnsName": "{% $states.input.DnsEntry.DomainName %}",
                                  "EvaluateTargetHealth": false
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                {
                  "StartAt": "TrackAliasRecord",
                  "States": {
                    "TrackAliasRecord": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::dynamodb:putItem",
                      "End": true,
                      "QueryLanguage": "JSONata",
                      "Arguments": {
                        "TableName": "${dynamodbtable}",
                        "Item": {
                          "ServiceArn": {
                            "S": "{% $ServiceArn %}"
                          },
                          "CustomDomainName": {
                            "S": "{% $states.input.CustomDomainName %}"
                          },
                          "VpcLatticeDomainName": {
                            "S": "{% $states.input.DnsEntry.DomainName %}"
                          },
                          "HostedZoneId": {
                            "S": "${phz}"
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "End": true,
              "QueryLanguage": "JSONata"
            }
          }
        }
  
  # IAM Role/Policy (Step Functions state machine)
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: StepFunctionsRole
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - !Ref StepFunctionsPolicy

  StepFunctionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: StepFunctionsPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - vpc-lattice:GetService
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
            Resource:
              - !GetAtt DynamoDBTable.Arn
          - Effect: Allow
            Action:
              - route53:ListTagsForResource
              - route53:ListResourceRecordSets
              - route53:ChangeTagsForResource
              - route53:ChangeResourceRecordSets
            Resource:
              - !Sub arn:aws:route53:::hostedzone/${PrivateHostedZone}
          - Effect: Allow
            Action:
              - logs:UpdateLogDelivery
              - logs:PutResourcePolicy
              - logs:PutLogEvents
              - logs:ListLogDeliveries
              - logs:GetLogDelivery
              - logs:DescribeResourcePolicies
              - logs:DescribeLogGroups
              - logs:DeleteLogDelivery
              - logs:CreateLogStream
              - logs:CreateLogDelivery
            Resource:
              - "*"
  
  # ---------- AMAZON CLOUDWATCH LOG GROUP ----------
  StepFunctionsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/vendedlogs/states/
      RetentionInDays: 30
  
  # ---------- DYNAMODB TABLE ----------
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VPCLattice_DNSAutomation
      AttributeDefinitions:
        - AttributeName: "ServiceArn"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ServiceArn"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # ----------- CUSTOM RESOURCE: OBTAINING ORGANIZATION ID ----------
  GetOrganization:
    Type: Custom::GetOrganization
    DependsOn:
      - GetOrganizationLogGroup
    Properties:
      ServiceToken: !GetAtt GetOrganizationFunction.Arn

  # IAM Role (Describe Organization)
  GetOrganizationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowDescribeOrganization
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - organizations:DescribeOrganization
                Resource:
                  - "*"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetOrganizationLogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: Encryption not required for this log group
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/lambda/GetOrganizationFunction'
      RetentionInDays: 7
  
  GetOrganizationFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CWL permissions granted by use of AWSLambdaBasicExecutionRole
          - id: W89
            reason: No requirement for this function to be in a VPC
          - id: W92
            reason: No requirement to limit simultaneous executions
    Type: AWS::Lambda::Function
    Properties:
      Description: Get AWS Organization Information
      Runtime: python3.12
      Timeout: 10
      Role: !GetAtt GetOrganizationFunctionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |-
          import logging
          import boto3
          import json
          import cfnresponse
          from botocore.exceptions import ClientError

          log = logging.getLogger("handler")
          log.setLevel(logging.INFO)

          org = boto3.client('organizations')

          def lambda_handler(event, context):
              try:
                  log.info("Received event: %s", json.dumps(event))
                  request_type = event['RequestType']
                  response = {}

                  if request_type == 'Create':
                    org_info = org.describe_organization()
                    response['Id'] = org_info['Organization']['Id']
                    response['Arn'] = org_info['Organization']['Arn']
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
                  
              except:
                  log.exception("whoops")
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.FAILED,
                      {},
                      reason="Caught exception, check logs",
                  )
